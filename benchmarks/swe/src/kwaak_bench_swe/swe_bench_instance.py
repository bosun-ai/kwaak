from dataclasses import dataclass, asdict
from typing import Any
import json
from swebench.harness.test_spec import get_test_directives
from swebench.harness.constants import (
    MAP_REPO_VERSION_TO_SPECS,
)

@dataclass
class SWEBenchInstance:
    repo: str # The repository owner/name identifier from GitHub.
    instance_id: str # A formatted instance identifier, usually as repo_owner__repo_name-PR-number.
    base_commit: str # The commit hash of the repository representing the HEAD of the repository before the solution PR is applied.
    patch: str # The gold patch, the patch generated by the PR (minus test-related code), that resolved the issue.
    test_patch: str # A test-file patch that was contributed by the solution PR.
    problem_statement: str # The issue title and body.
    hints_text: str # Comments made on the issue prior to the creation of the solution PRâ€™s first commit creation date.
    created_at: str # The creation date of the pull request.
    version: str # Installation version to use for running evaluation.
    FAIL_TO_PASS: list[str] # A json list of strings that represent the set of tests resolved by the PR and tied to the issue resolution.
    PASS_TO_PASS: list[str] # A json list of strings that represent tests that should pass before and after the PR application.
    environment_setup_commit: str # commit hash to use for environment setup and installation.

    env_name = "testbed"
    repo_directory = "/testbed"

    def to_dict(self) -> dict[str, Any]:
        """Convert the instance to a dictionary for JSON serialization."""
        return asdict(self)

    @property
    def instance_image_key(self):
        # Hardcoded to x86_64 because some instances don't support arm64, but all support x86_64
        return f"swebench/sweb.eval.x86_64.{self.instance_id.lower().replace('__', '_1776_')}:latest"

    @property
    def specs(self):
        return MAP_REPO_VERSION_TO_SPECS[self.repo][self.version]

    @property
    def test_cmd(self):
        return [
            f"source /opt/miniconda3/bin/activate",
            f"conda activate {self.env_name}",
            f"cd {self.repo_directory}",
            " ".join(
                self.specs["test_cmd"],
                *get_test_directives(self.to_dict()),
            )
        ].join("\n")

    @property
    def apply_test_patch_command(self):
        HEREDOC_DELIMITER = "EOF_114329324912"
        return f"git apply -v - <<'{HEREDOC_DELIMITER}'\n{self.test_patch}\n{HEREDOC_DELIMITER}"

    # class method from_dataset iterates over the dataset and returns a list of SWEBenchInstance objects
    @classmethod
    def from_dataset(cls, dataset):
        return [
            cls(
                **{
                    **item,
                    "FAIL_TO_PASS": json.loads(item["FAIL_TO_PASS"]),
                    "PASS_TO_PASS": json.loads(item["PASS_TO_PASS"])
                }
            )
            for item in dataset
        ]

