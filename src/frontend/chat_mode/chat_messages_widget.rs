use super::common::format_chat_message;\n// Assuming necessary imports and trait implementations are in place\nuse tui::widgets::{Block, Borders, StatefulWidget};\nuse tui::text::Text;\nuse crate::chat::Chat;\nuse crate::frontend::app::App;\nuse tui::layout::Rect;\nuse tui::Frame;\nuse tui::widgets::Scrollbar;\nuse tui::widgets::ScrollbarOrientation;\n\n/// ChatMessagesWidget represents the rendering component\n/// for displaying chat messages including auto-tailing functionality.\npub struct ChatMessagesWidget;\n\nimpl ChatMessagesWidget {\n    pub fn render<B: Backend>(f: &mut Frame<B>, app: &App, area: Rect) {\n        if let Some(current_chat) = app.current_chat() {\n            let messages = current_chat.messages.iter().map(format_chat_message).collect::<Vec<_>>();\n            let chat_messages = messages.join(\"\\n\");\n\n            let auto_tailing_enabled = current_chat.auto_tailing_enabled &&\n                current_chat.vertical_scroll >= current_chat.num_lines.saturating_sub(1);\n\n            let chat_widget = Paragraph::new(chat_messages)\n                .block(Block::default().borders(Borders::ALL).title(\"Chat\"))\n                .scroll((current_chat.vertical_scroll as u16, 0));\n\n            f.render_widget(chat_widget, area);\n\n            f.render_stateful_widget(\n                Scrollbar::new(ScrollbarOrientation::VerticalRight)\n                    .begin_symbol(Some(\"\\"     ,
