// Adjustments to auto-tailing handling when user manually interacts\nuse super::ui_event::UIEvent;\n// Assuming imports, necessary definitions, and modules are intact\n\nimpl App {\n    // Function to handle events\n    fn handle_event(&mut self, event: UIEvent) {\n        match event {\n            UIEvent::ScrollUp => {\n                let Some(current_chat) = self.current_chat_mut() else {\n                    return;\n                };\n                current_chat.vertical_scroll = current_chat.vertical_scroll.saturating_sub(2);\n                current_chat.vertical_scroll_state = current_chat\n                    .vertical_scroll_state\n                    .position(current_chat.vertical_scroll);\n                current_chat.auto_tailing_enabled = false;\n            },\n            UIEvent::ScrollDown => {\n                let Some(current_chat) = self.current_chat_mut() else {\n                    return;\n                };\n                current_chat.vertical_scroll = current_chat.vertical_scroll.saturating_add(2);\n                current_chat.vertical_scroll_state = current_chat\n                    .vertical_scroll_state\n                    .position(current_chat.vertical_scroll);\n                current_chat.auto_tailing_enabled = false;\n            },\n            UIEvent::ScrollEnd => {\n                let Some(current_chat) = self.current_chat_mut() else {\n                    return;\n                };\n                let scroll_position = current_chat.num_lines.saturating_sub(1);\n                current_chat.vertical_scroll = scroll_position;\n                current_chat.vertical_scroll_state =\n                    current_chat.vertical_scroll_state.position(scroll_position);\n                current_chat.auto_tailing_enabled = true;\n            },\n            _ => (),\n        }\n    }\n}
